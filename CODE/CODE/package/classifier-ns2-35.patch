diff -crBN ns-allinone-2.35/ns-2.35/common/packet.h ns-allinone-2.35-svm_nn/ns-2.35/common/packet.h
*** ns-allinone-2.35/ns-2.35/common/packet.h	2010-05-10 03:58:41.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/common/packet.h	2012-08-29 11:02:19.000000000 +0530
***************
*** 198,206 ****
  
          // M-DART packets
  static const packet_t PT_MDART = 72;
  	
          // insert new packet types here
! static packet_t       PT_NTYPE = 73; // This MUST be the LAST one
  
  enum packetClass
  {
--- 198,209 ----
  
          // M-DART packets
  static const packet_t PT_MDART = 72;
+ 
+ // svm_nn Packet - to port svm_nn's ns-2.30 patch to ns-2.35
+ static const packet_t PT_svm_nn = 73;
  	
          // insert new packet types here
! static packet_t       PT_NTYPE = 74; // This MUST be the LAST one
  
  enum packetClass
  {
***************
*** 417,422 ****
--- 420,427 ----
  		name_[PT_DCCP_CLOSEREQ]="DCCP_CloseReq";
  		name_[PT_DCCP_RESET]="DCCP_Reset";
  
+ 		name_[PT_svm_nn]="svm_nn"; // svm_nn - to port svm_nn's ns-2.30 patch to ns-2.35		
+ 
  		name_[PT_NTYPE]= "undefined";
  	}
  	static int addPacket(char *name);
diff -crBN ns-allinone-2.35/ns-2.35/Makefile.in ns-allinone-2.35-svm_nn/ns-2.35/Makefile.in
*** ns-allinone-2.35/ns-2.35/Makefile.in	2011-10-23 21:59:54.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/Makefile.in	2012-08-29 11:00:16.000000000 +0530
***************
*** 201,206 ****
--- 201,207 ----
  	tcp/tcp-asym-fs.o \
  	tcp/tcp-int.o tcp/chost.o tcp/tcp-session.o \
  	tcp/nilist.o \
+ 	svm_nn/svm_nn.o svm_nn/svm_nn-host.o \
  	sctp/sctp.o apps/sctp_app1.o\
  	sctp/sctp-timestamp.o sctp/sctp-hbAfterRto.o \
  	sctp/sctp-multipleFastRtx.o sctp/sctp-mfrHbAfterRto.o \
diff -crBN ns-allinone-2.35/ns-2.35/svm_nn/svm_nn.cc ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn.cc
*** ns-allinone-2.35/ns-2.35/svm_nn/svm_nn.cc	1970-01-01 05:30:00.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn.cc	2012-08-29 11:00:16.000000000 +0530
***************
*** 0 ****
--- 1,526 ----
+ /* 
+  * Author: Rui Zhang and Nandita Dukkipati
+  * This file will implement the svm_nn router.
+  * Part of the code is taken from Dina Katabi's XCP implementation.
+  */
+ 
+ /* svm_nn.cc.v4
+  * --------
+  * R = R * { 1 + (T/rtt)*[alpha*(C - input_tr/T) - beta*Q/rtt]/link_capacity};
+  * where the input_tr is measured over a time interval of 'T'
+  */
+ 
+ #include <math.h>
+ 
+ #include "red.h"
+ #include "drop-tail.h"
+ #include "tcp.h"
+ #include "random.h"
+ #include "ip.h"
+ #include <string.h>
+ #include "svm_nn-host.h"
+ 
+ // #define ALPHA 0.4
+ // #define BETA 0.4
+ #define PHI 0.95
+ #define PARENT DropTail
+ // #define INIT_RATE_FACT 0.05 
+ #define RTT 0.2
+ #define INIT_NUMFLOWS 50 
+ // #define TIMESLOT 0.01
+ 
+ #define RTT_GAIN 0.02 //Should be on the order of 1/(number of co-existing flows)
+ 
+ static unsigned int next_router = 0; //Rui: really should be next_queue
+ 
+ class svm_nnQueue;
+ 
+ 
+ class svm_nnQTimer : public TimerHandler { 
+ public:
+   svm_nnQTimer(svm_nnQueue *a, void (svm_nnQueue::*call_back)() ) : a_(a), call_back_(call_back) {};
+ protected:
+   virtual void expire (Event *e);
+   void (svm_nnQueue::*call_back_)();
+   svm_nnQueue *a_;
+ }; 
+ 
+ 
+ 
+ class svm_nnQueue : public PARENT {
+   friend class svm_nnQTimer;
+ public:
+   svm_nnQueue();
+   int command(int argc, const char*const* argv);
+   void queue_timeout();    // timeout every Tq_ for load stats update
+ protected:
+   // Modified functions
+   virtual void enque(Packet* pkt);
+   virtual Packet* deque();
+ 
+   // ------------ Utility Functions
+   inline double now()  { return  Scheduler::instance().clock(); }
+ 
+   double running_avg(double var_sample, double var_last_avg, double gain);
+   inline double max(double d1, double d2){ if (d1 > d2){return d1;} else {return d2;} }
+   inline double min(double d1, double d2){ if (d1 < d2){return d1;} else {return d2;} }
+ 
+   // ------------- Estimation & Control Helpers
+   void init_vars() {
+     routerId_ = next_router++; // Rui: should be queueId_ instead
+     link_capacity_ = -1;
+     input_traffic_ = 0.0;
+     act_input_traffic_ = 0.0;
+     output_traffic_ = 0.0;
+     last_load_ = 0;
+     traffic_spill_ = 0;
+     num_flows_ = INIT_NUMFLOWS;
+     avg_rtt_ = RTT;
+     this_Tq_rtt_sum_ = 0;
+     this_Tq_rtt_     = 0;
+     this_Tq_rtt_numPkts_ = 0;
+     input_traffic_rtt_   = 0;
+     rtt_moving_gain_ = RTT_GAIN;
+ //    Tq_ = RTT;
+ //    Tq_ = min(RTT, TIMESLOT);
+     Q_ = 0;
+     Q_last = 0;
+   }
+ 
+   virtual void do_on_packet_arrival(Packet* pkt); // called in enque(), but packet may be dropped
+                                                   // used for updating the estimation helping vars 
+                                                   // such as counting the offered_load_
+   virtual void do_before_packet_departure(Packet* p); // called in deque(), before packet leaves
+                                                       // used for writing the feedback in the packet
+   virtual void fill_in_feedback(Packet* p); // called in do_before_packet_departure()
+                                             // used for writing the feedback in the packet
+ 
+   inline double packet_time(Packet* pkt);
+ 
+   //int svm_nnQueue::timeslot(double time);
+ 
+ 
+  /* ------------ Variables ----------------- */
+   unsigned int    routerId_;
+   svm_nnQTimer        queue_timer_;
+   double          Tq_;
+ 
+   // Rui: link_capacity_ is set by tcl script.
+   // Rui: must call set-link-capacity after building topology and before running simulation
+   double link_capacity_;
+   double input_traffic_;       // traffic in Tq_
+   double act_input_traffic_;
+   double output_traffic_;
+   double traffic_spill_;  // parts of packets that should fall in next slot
+   double last_load_; 
+   double end_slot_; // end time of the current time slot
+   int num_flows_;
+   double avg_rtt_;
+   double this_Tq_rtt_sum_;
+   double this_Tq_rtt_;
+   double this_Tq_rtt_numPkts_;
+   int input_traffic_rtt_;
+   double rtt_moving_gain_;
+   int Q_;
+   int Q_last;
+   double flow_rate_;
+   double alpha_;  // Masayoshi
+   double beta_;   // Masayoshi
+   double gamma_;
+   double min_pprtt_;   // Masayoshi minimum packet per rtt
+   double init_rate_fact_;    // Masayoshi
+   int    print_status_;      // Masayoshi
+   int    rate_fact_mode_;    // Masayoshi
+   double fixed_rate_fact_;   // Masayoshi
+   double propag_rtt_ ;       // Masayoshi (experimental, used with rate_fact_mode_ = 3)
+   double upd_timeslot_ ;       // Masayoshi 
+ 
+   Tcl_Channel   channel_;      // Masayoshi
+ 
+ };
+ 
+ 
+ /*--------------------- Code -------------------------------------*/
+ 
+ static class svm_nnClass : public TclClass {
+ public:
+   svm_nnClass() : TclClass("Queue/DropTail/svm_nn") {}
+   TclObject* create(int, const char*const*) {
+     return (new svm_nnQueue);
+   }
+ } class_svm_nn_queue;
+ 
+ 
+ svm_nnQueue::svm_nnQueue(): PARENT(), queue_timer_(this, &svm_nnQueue::queue_timeout),
+ 		      channel_(NULL)
+ {
+   double T;
+   init_vars();
+ 
+   //bind("Tq_", &timeout_);
+ 
+   bind("alpha_", &alpha_);  // Masayoshi
+   bind("beta_", &beta_);    // Masayoshi
+   bind("gamma_", &gamma_); 
+   bind("min_pprtt_", &min_pprtt_);    // Masayoshi
+   bind("init_rate_fact_", &init_rate_fact_);    // Masayoshi
+   bind("print_status_", &print_status_);    // Masayoshi
+   bind("rate_fact_mode_", &rate_fact_mode_);    // Masayoshi
+   bind("fixed_rate_fact_", &fixed_rate_fact_);    // Masayoshi
+   bind("propag_rtt_", &propag_rtt_);    // Masayoshi
+   bind("upd_timeslot_", &upd_timeslot_);    // Masayoshi
+   Tq_ = min(RTT, upd_timeslot_);  // Tq_ has to be initialized  after binding of upd_timeslot_ 
+   //
+   // fprintf(stdout,"LOG-svm_nnQueue: alpha_ %f beta_ %f\n",alpha_,beta_);
+ 
+   // Scheduling queue_timer randommly so that routers are not synchronized
+   T = Random::normal(Tq_, 0.2*Tq_);
+   //if (T < 0.004) { T = 0.004; } // Not sure why Dina did this...
+ 
+   end_slot_ = T;
+   queue_timer_.sched(T);
+ }
+ 
+ 
+ Packet* svm_nnQueue::deque()
+ {
+ 	Packet *p;
+ 
+ 	p = PARENT::deque();
+ 	if (p != NULL)
+ 	  do_before_packet_departure(p);
+ 	return (p);
+ }
+ 
+ void svm_nnQueue::enque(Packet* pkt)
+ {
+   do_on_packet_arrival(pkt);
+ 
+   PARENT::enque(pkt);
+ }
+ 
+ void svm_nnQueue::do_on_packet_arrival(Packet* pkt){
+   // Taking input traffic statistics
+   int size = hdr_cmn::access(pkt)->size();
+   hdr_svm_nn * hdr = hdr_svm_nn::access(pkt);
+   double pkt_time_ = packet_time(pkt);
+   double end_time = now() + pkt_time_;
+   double part1, part2;
+ 
+   // update avg_rtt_ here
+   double this_rtt = hdr->rtt();
+ 
+   if (this_rtt > 0) {
+ 
+        this_Tq_rtt_sum_ += (this_rtt * size);
+        input_traffic_rtt_ += size;
+        this_Tq_rtt_ = running_avg(this_rtt, this_Tq_rtt_, flow_rate_/link_capacity_);    
+ 
+ //     rtt_moving_gain_ = flow_rate_/link_capacity_;
+ //     avg_rtt_ = running_avg(this_rtt, avg_rtt_, rtt_moving_gain_);
+   }
+ 
+   if (end_time <= end_slot_)
+     act_input_traffic_ += size;
+   else {
+     part2 = size * (end_time - end_slot_)/pkt_time_;
+     part1 = size - part2;
+    act_input_traffic_ += part1;
+     traffic_spill_ += part2;
+   }
+ 
+   // Can do some measurement of queue length here
+   // length() in packets and byteLength() in bytes
+ 
+   /* Can read the flow size from a last packet here */
+ }
+ 
+ 
+ void svm_nnQueue::do_before_packet_departure(Packet* p){
+   hdr_svm_nn * hdr = hdr_svm_nn::access(p);
+   int size = hdr_cmn::access(p)->size();
+   output_traffic_ += size;  
+   
+   if ( hdr->svm_nn_pkt_type() == svm_nn_SYN )
+   {
+ //	  num_flows_++;
+ 	  fill_in_feedback(p);
+   }
+   else if (hdr->svm_nn_pkt_type() == svm_nn_FIN )
+   {
+ //	  num_flows_--;
+   }
+   else if ( hdr->svm_nn_pkt_type() == svm_nn_REF || hdr->svm_nn_pkt_type() == svm_nn_DATA )
+   {
+ 	  fill_in_feedback(p);
+   }
+ 		  
+ }
+ 
+ 
+ void svm_nnQueue::queue_timeout()
+ {
+   double temp;
+   double datarate_fact;
+   double estN1;
+   double estN2;
+   int Q_pkts;
+   char clip;
+   int Q_target_;
+ 
+   double ratio;
+   double input_traffic_devider_;
+   double queueing_delay_;
+ 
+   double virtual_link_capacity; // bytes per second
+   
+   last_load_ = act_input_traffic_/Tq_; // bytes per second
+ 
+   Q_ = byteLength();
+   Q_pkts = length();
+  
+   input_traffic_ = last_load_;
+   if (input_traffic_rtt_ > 0)
+     this_Tq_rtt_numPkts_ = this_Tq_rtt_sum_/input_traffic_rtt_; 
+ 
+   /*
+   if (this_Tq_rtt_numPkts_ >= avg_rtt_)
+       rtt_moving_gain_ = (flow_rate_/link_capacity_);
+   else 
+       rtt_moving_gain_ = (flow_rate_/link_capacity_)*(this_Tq_rtt_numPkts_/avg_rtt_)*(Tq_/avg_rtt_);
+    */
+    if (this_Tq_rtt_numPkts_ >= avg_rtt_)
+         rtt_moving_gain_ = (Tq_/avg_rtt_);
+    else 
+         rtt_moving_gain_ = (flow_rate_/link_capacity_)*(this_Tq_rtt_numPkts_/avg_rtt_)*(Tq_/avg_rtt_);
+ 
+   avg_rtt_ = running_avg(this_Tq_rtt_numPkts_, avg_rtt_, rtt_moving_gain_);
+  
+ //  if (Q_ == 0)
+ //	  input_traffic_ = PHI*link_capacity_;
+ //  else
+ //	 input_traffic_ = link_capacity_ + (Q_ - Q_last)/Tq_; 
+ 
+ //  queueing_delay_ = (Q_ ) / (link_capacity_ );
+ //  if ( avg_rtt_ > queueing_delay_ ){
+ //    propag_rtt_ = avg_rtt_ - queueing_delay_;
+ //  } else {
+ //    propag_rtt_ = avg_rtt_;
+ //  } 
+ 
+ 
+   estN1 = input_traffic_ / flow_rate_;
+   estN2 = link_capacity_ / flow_rate_;
+ 
+   if ( rate_fact_mode_ == 0) { // Masayoshi .. for Nandita's svm_nn
+ 
+    virtual_link_capacity = gamma_ * link_capacity_;
+ 
+     /* Estimate # of active flows with  estN2 = (link_capacity_/flow_rate_) */
+     ratio = (1 + ((Tq_/avg_rtt_)*(alpha_*(virtual_link_capacity - input_traffic_) - beta_*(Q_/avg_rtt_)))/virtual_link_capacity);
+     temp = flow_rate_ * ratio;
+ 
+   } else if ( rate_fact_mode_ == 1) { // Masayoshi .. for fixed rate fact
+     /* Fixed Rate Mode */
+     temp = link_capacity_ * fixed_rate_fact_;
+ 
+   } else if ( rate_fact_mode_ == 2) { 
+ 
+     /* Estimate # of active flows with  estN1 = (input_traffic_/flow_rate_) */
+ 
+     if (input_traffic_ == 0.0 ){
+       input_traffic_devider_ = link_capacity_/1000000.0;
+     } else {
+       input_traffic_devider_ = input_traffic_;
+     }
+     ratio = (1 + ((Tq_/avg_rtt_)*(alpha_*(link_capacity_ - input_traffic_) - beta_*(Q_/avg_rtt_)))/input_traffic_devider_);
+     temp = flow_rate_ * ratio;
+ 
+   } else if ( rate_fact_mode_ == 3) { 
+     //if (input_traffic_ == 0.0 ){
+     //input_traffic_devider_ = link_capacity_/1000000.0;
+     //    } else {
+     //input_traffic_devider_ = input_traffic_;
+     //}
+     ratio =  (1 + ((Tq_/propag_rtt_)*(alpha_*(link_capacity_ - input_traffic_) - beta_*(Q_/propag_rtt_)))/link_capacity_);
+     temp = flow_rate_ * ratio;
+   } else  if ( rate_fact_mode_ == 4) { // Masayoshi .. Experimental
+     ratio = (1 + ((Tq_/avg_rtt_)*(alpha_*(link_capacity_ - input_traffic_) - beta_*(Q_/avg_rtt_)))/link_capacity_);
+     temp = flow_rate_ * ratio;
+     // link_capacity_ : byte/sec
+   } else  if ( rate_fact_mode_ == 5) {
+     // temp = - link_capacity_ * ( Q_/(link_capacity_* avg_rtt_) - 1.0);
+     //temp = flow_rate_ +  link_capacity_ * (alpha_ * (1.0 - input_traffic_/link_capacity_) - beta_ * ( Q_/(avg_rtt_*link_capacity_) )) * Tq_;
+     temp = link_capacity_ * exp ( - Q_/(link_capacity_* avg_rtt_));
+   } else  if ( rate_fact_mode_ == 6) {
+     temp = link_capacity_ * exp ( - Q_/(link_capacity_* propag_rtt_));
+   } else  if ( rate_fact_mode_ == 7) {
+      temp = - link_capacity_ * ( Q_/(link_capacity_* propag_rtt_) - 1.0);
+   } else  if ( rate_fact_mode_ == 8) {
+     temp = flow_rate_ +  link_capacity_ * (alpha_ * (1.0 - input_traffic_/link_capacity_) - beta_/avg_rtt_ * ( Q_/(propag_rtt_*link_capacity_) - 0.8 )) * Tq_;
+   }
+ 
+ 
+   if ( rate_fact_mode_ != 4) { // Masayoshi .. Experimental
+     if (temp < min_pprtt_ * (1000/avg_rtt_) ){     // Masayoshi
+       flow_rate_ = min_pprtt_ * (1000/avg_rtt_) ; // min pkt per rtt 
+       clip  = 'L';
+     } else if (temp > virtual_link_capacity){
+       flow_rate_ = virtual_link_capacity;
+       clip = 'U';
+     } else {
+       flow_rate_ = temp;
+       clip = 'M';
+     }
+   }else{
+     if (temp < 16000.0 ){    // Masayoshi 16 KB/sec = 128 Kbps
+       flow_rate_ = 16000.0;
+       clip  = 'L';
+     } else if (temp > link_capacity_){
+       flow_rate_ = link_capacity_;
+       clip = 'U';
+     } else {
+       flow_rate_ = temp;
+       clip = 'M';
+     }
+   }
+ 
+ 
+ //  else if (temp < 0 )  
+ //	 flow_rate_ = 1000/avg_rtt_; // 1 pkt per rtt 
+ 
+   datarate_fact = flow_rate_/link_capacity_;
+ 
+ //   if (print_status_ == 1) 
+ //   if (routerId_ == 0) 
+ //      	   fprintf(stdout, "%f %d %f %f %f\n", now(), length(), datarate_fact, output_traffic_/(link_capacity_*Tq_), avg_rtt_);
+ //	fprintf(stdout, "%s %f %d %d %f %f %f\n", this->name(),now(), byteLength(), Q_pkts, datarate_fact, last_load_, avg_rtt_);
+      //	fprintf(stdout, "%s %f %d %d %.10lf %f %f %f %f %f %f %f %c\n", this->name(),now(), byteLength(), Q_pkts, datarate_fact, last_load_, avg_rtt_,(link_capacity_ - input_traffic_)/link_capacity_, (Q_/propag_rtt_)/link_capacity_,ratio,estN1,estN2,clip);
+ 
+      if(channel_ != NULL){
+        char buf[2048];
+        sprintf(buf, "%s %f %d %d %.10lf %f %f %f %f %f %f %f %c\n", this->name(),now(), byteLength(), Q_pkts, datarate_fact, last_load_, avg_rtt_,(link_capacity_ - input_traffic_)/link_capacity_, (Q_/avg_rtt_)/link_capacity_,ratio,estN1,estN2,clip);
+ 	   // sprintf(buf, "%f %d %.5lf %f %f %f %f %f %c\n", now(), byteLength(), datarate_fact, avg_rtt_, this_Tq_rtt_, this_Tq_rtt_numPkts_, last_load_, (link_capacity_ - input_traffic_)/link_capacity_, clip);
+ //       sprintf(buf, "%f r_ %f estN1_ %f estN2_ %f \n", now(), datarate_fact, estN1, estN2); 
+ 	   (void)Tcl_Write(channel_, buf, strlen(buf));
+      }
+ 
+ // fflush(stdout);
+ 
+   Tq_ = min(avg_rtt_, upd_timeslot_);
+   this_Tq_rtt_ = 0;
+   this_Tq_rtt_sum_ = 0;
+   input_traffic_rtt_ = 0;
+   Q_last = Q_;
+   act_input_traffic_ = traffic_spill_;
+   traffic_spill_ = 0;  
+   output_traffic_ = 0.0;
+   end_slot_ = now() + Tq_;
+   queue_timer_.resched(Tq_);
+ }
+ 
+ 
+ /* Rui: current scheme:  */
+ void svm_nnQueue::fill_in_feedback(Packet* p){
+ 
+   hdr_svm_nn * hdr = hdr_svm_nn::access(p);
+   double request = hdr->svm_nn_request_rate();
+   
+   // update avg_rtt_ here
+   // double this_rtt = hdr->rtt();
+   
+   /*
+   if (this_rtt > 0) {
+     avg_rtt_ = running_avg(this_rtt, avg_rtt_, RTT_GAIN);
+   }
+   */
+ 
+   if (request < 0 || request > flow_rate_)
+     hdr->set_svm_nn_rate(flow_rate_);
+ }
+ 
+ int svm_nnQueue::command(int argc, const char*const* argv)
+ {
+   Tcl& tcl = Tcl::instance();
+ 
+   if (argc == 2) {
+     ;
+   }
+   else if (argc == 3) {
+     if (strcmp(argv[1], "set-link-capacity") == 0) {
+       link_capacity_ = strtod(argv[2],0);
+       if (link_capacity_ < 0.0) {printf("Error: BW < 0\n"); abort();}
+       // Rui: Link capacity is in bytes.
+       flow_rate_ = link_capacity_ * init_rate_fact_;
+ 
+       if ( rate_fact_mode_ == 1) { // Masayoshi
+ 	flow_rate_ = link_capacity_ * fixed_rate_fact_;
+       }
+ 
+       // Initializing the PARENT 
+ #ifdef RED_PARENT
+       edp_.th_min = 0.4 * limit();		    // minthresh
+       edp_.th_max = 0.8 * limit();	            // maxthresh
+       edp_.q_w = 0.01 / limit();		    // for EWMA
+       edp_.max_p_inv = 3;
+ 	      
+       // If you have an old version of ns and you are getting a compilation 
+       // error then comments the two lines below
+       edp_.th_min_pkts = 0.6 * limit();		    // minthresh
+       edp_.th_max_pkts = 0.8 * limit();	            // maxthresh
+ 
+       //printf("RED Dropping Policy, Min %g, Max %g, W %g, inv_p %g \n",
+       //edp_.th_min,edp_.th_max,edp_.q_w,edp_.max_p_inv);
+ #endif   
+       return (TCL_OK);
+ 
+     } else if (strcmp(argv[1], "set-rate-fact-mode") == 0) { // Masayoshi
+       rate_fact_mode_ = atoi(argv[2]);
+       if (rate_fact_mode_ != 0 && rate_fact_mode_ != 1){
+ 	printf("Error: (svm_nn) rate_fact_mode_ should be 1 or 0\n"); 
+       }
+       return (TCL_OK);
+     } else if (strcmp(argv[1], "set-fixed-rate-fact") == 0) { // Masayoshi
+       fixed_rate_fact_ = strtod(argv[2],0);
+       if (fixed_rate_fact_ < 0.0 || fixed_rate_fact_ > 1.0){
+ 	printf("Error: (svm_nn) fixed_rate_fact_ < 0 or >1.0\n"); 
+ 	abort();
+       }
+       return (TCL_OK);
+     } else if (strcmp(argv[1], "set-flow-rate") == 0) { // Masayoshi
+       flow_rate_ = strtod(argv[2],0);
+       return (TCL_OK);
+     }
+     if (strcmp(argv[1], "attach") == 0) {
+       int mode;
+       const char* id = argv[2];
+       channel_ = Tcl_GetChannel(tcl.interp(),
+                                 (char*) id, &mode);
+       if (channel_ == NULL) {
+ 	tcl.resultf("Tagger (%s): can't attach %s for writing",
+ 		    name(), id);
+ 	return (TCL_ERROR);
+       }
+       return (TCL_OK);
+     }
+   }
+   return PARENT::command(argc, argv);
+ }
+ 
+ 
+ inline double svm_nnQueue::packet_time(Packet* pkt){
+   return (hdr_cmn::access(pkt)->size()/link_capacity_);
+ }
+ 
+ void svm_nnQTimer::expire(Event *) { 
+   (*a_.*call_back_)();
+ }
+ 
+ double svm_nnQueue::running_avg(double var_sample, double var_last_avg, double gain)
+ {
+ 	double avg;
+ 	if (gain < 0)
+ 	  exit(3);
+ 	avg = gain * var_sample + ( 1 - gain) * var_last_avg;
+ 	return avg;
+ }
diff -crBN ns-allinone-2.35/ns-2.35/svm_nn/svm_nn-host.cc ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn-host.cc
*** ns-allinone-2.35/ns-2.35/svm_nn/svm_nn-host.cc	1970-01-01 05:30:00.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn-host.cc	2012-08-29 11:00:16.000000000 +0530
***************
*** 0 ****
--- 1,788 ----
+ /* -*-	Mode:C++; c-basic-offset:8; tab-width:8; indent-tabs-mode:t -*- */
+ /*
+  * Copyright (c) 1997 Regents of the University of California.
+  * All rights reserved.
+  * 
+  * Redistribution and use in source and binary forms, with or without
+  * modification, are permitted provided that the following conditions
+  * are met:
+  * 1. Redistributions of source code must retain the above copyright
+  *    notice, this list of conditions and the following disclaimer.
+  * 2. Redistributions in binary form must reproduce the above copyright
+  *    notice, this list of conditions and the following disclaimer in the
+  *    documentation and/or other materials provided with the distribution.
+  * 3. All advertising materials mentioning features or use of this software
+  *    must display the following acknowledgement:
+  * 	This product includes software developed by the MASH Research
+  * 	Group at the University of California Berkeley.
+  * 4. Neither the name of the University nor of the Research Group may be
+  *    used to endorse or promote products derived from this software without
+  *    specific prior written permission.
+  * 
+  * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
+  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+  * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
+  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
+  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
+  * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
+  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
+  * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
+  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
+  * SUCH DAMAGE.
+  */
+ 
+ /* svm_nn-host5.cc
+  * -------
+  * rtp1.cc: rate is fixed at the beginning and does not change during flow duration.
+  * rtp2.cc: rate is reset every round trip time. (Too much probing)
+  * rtp3.cc: rate is reset every (RTT + SYN_DELAY). To disable subsequent SYNs, set SYN_DELAY larger than all flow durations.
+  * rtp4.cc: SYN(ACK) packets are of different size from data packets. Rate is reset every (RTT + SYN_DELAY).
+  * rtp5.cc: Rate is reset every SYN_DELAY time.
+  */
+ 
+ 
+ //#define DELETE_AGENTS  //xxxxrui
+ 
+ // #define MASAYOSHI_DEBUG 1
+ 
+ #include <stdlib.h>
+ 
+ #include "config.h"
+ #include "agent.h"
+ #include "random.h"
+ #include "svm_nn-host.h"
+ #include "ip.h" /* Nandita Rui */
+ 
+ //#define SYN_DELAY 0.05
+ #define SYN_DELAY 0.5
+ #define REF_FACT 4  //Number of REFs per RTT
+ #define svm_nn_HDR_BYTES 40  //same as TCP for fair comparison
+ #define QUIT_PROB 0.1  //probability of quitting if assigned rate is zero
+ #define REF_INTVAL 1.0 //
+ 
+ int hdr_svm_nn::offset_;
+ 
+ class svm_nnHeaderClass : public PacketHeaderClass {
+ public: 
+ 	svm_nnHeaderClass() : PacketHeaderClass("PacketHeader/svm_nn", sizeof(hdr_svm_nn)) {
+ 		bind_offset(&hdr_svm_nn::offset_);
+ 	}
+ } class_svm_nnhdr;
+ 
+ static class svm_nnAgentClass : public TclClass {
+ public:
+ 	svm_nnAgentClass() : TclClass("Agent/svm_nn") {}
+ 	TclObject* create(int, const char*const*) {
+ 		return (new svm_nnAgent());
+ 	}
+ } class_svm_nn_agent;
+ 
+ svm_nnAgent::svm_nnAgent() : Agent(PT_svm_nn), lastpkttime_(-1e6), 
+ 	svm_nn_timer_(this, &svm_nnAgent::timeout), num_sent_(0),
+ 	ref_timer_(this, &svm_nnAgent::ref_timeout), rtt_(0),
+ 	svm_nn_state(svm_nn_INACT), numOutRefs_(0),
+     min_rtt_(SYN_DELAY*REF_FACT*10), ref_seqno_(0),
+     num_dataPkts_acked_by_receiver_(0), num_dataPkts_received_(0),
+     num_Pkts_to_retransmit_(0), num_pkts_resent_(0),
+     num_enter_retransmit_mode_(0), rto_timer_(this, &svm_nnAgent::retrans_timeout)
+ {
+ 	bind("seqno_", &seqno_);
+ 	bind("packetSize_", &size_);
+ 	/* numpkts_ has file size, need not be an integer */
+ 	bind("numpkts_",&numpkts_);
+ 	bind("init_refintv_fix_",&init_refintv_fix_);
+     bind("fid_",&fid_);
+ }
+ 
+ 
+ void svm_nnAgent::reset() /* reset() is added by Masayoshi */
+ {
+ 	lastpkttime_ = -1e6;
+ 	num_sent_ = 0;
+ 	seqno_ = 0;
+ 	ref_seqno_ = 0;
+ 	rtt_ = 0;
+ 	svm_nn_state = svm_nn_INACT;
+ 	numOutRefs_ = 0;
+ 	min_rtt_ = SYN_DELAY * REF_FACT * 10;
+ 
+     num_dataPkts_acked_by_receiver_ = 0;
+     num_dataPkts_received_          = 0;
+     num_Pkts_to_retransmit_         = 0;
+     num_pkts_resent_                = 0;
+     num_enter_retransmit_mode_      = 0;
+ }
+ 
+ void svm_nnAgent::start()
+ {
+ 	double now = Scheduler::instance().clock();
+ 
+     svm_nn_state = svm_nn_RUNNING;
+ 	Tcl::instance().evalf("%s begin-datasend", this->name()); /* Added by Masayoshi */
+ 
+ 	// svm_nn_timer_.resched(interval_); // Masayosi. 
+ 	// // Always start sending after SYN-ACK receive 
+ 	// // is not good when gamma is very very small.
+ 
+ 	if( interval_ > REF_INTVAL * min_rtt_ ){  // At this momoent min_rtt_ has been set (by SYNACK)
+ 		ref_timer_.resched(REF_INTVAL * min_rtt_);
+ 		svm_nn_state = svm_nn_RUNNING_WREF;
+ #ifdef MASAYOSHI_DEBUG
+ 		fprintf(stdout,"MASA %lf svm_nn_RUNNING -> svm_nn_RUNNING_WREF at start %s\n",now,this->name());
+ #endif
+ 	} else {
+ 		svm_nn_state = svm_nn_RUNNING;
+ 		ref_timer_.force_cancel();
+ #ifdef MASAYOSHI_DEBUG
+ 		fprintf(stdout,"MASA %lf svm_nn_RUNNING at start %s\n",now,this->name());
+ #endif
+ 	}
+ 
+ 	// timeout should be later than the above svm_nn_state change.
+ 	// This is because if numpkts_ is one (1 pkt file transfer),
+ 	// the above state change may harmfully overwrite
+ 	// the change to svm_nn_FINSENT in timeout().
+ 	timeout();  
+ }
+ 
+ void svm_nnAgent::stop()
+ {
+     svm_nn_timer_.force_cancel();
+ 	ref_timer_.force_cancel();
+     rto_timer_.force_cancel();
+     finish();
+ }
+ 
+ void svm_nnAgent::pause()
+ {
+     svm_nn_timer_.force_cancel();
+ 	ref_timer_.force_cancel();
+     rto_timer_.force_cancel();
+ 	svm_nn_state = svm_nn_INACT;
+ }
+ 
+ /* Nandita: svm_nn_desired_rate sets the senders initial desired rate
+  */
+ double svm_nnAgent::svm_nn_desired_rate()
+ {
+      double svm_nn_rate_ = -1; 
+          return(svm_nn_rate_);
+ }
+ 
+ /* Nandita: sendfile() 
+  * Sends a SYN packet and enters svm_nnS_LISTEN state
+  * On receiving the SYN_ACK packet (with the rate) from
+  * svm_nn receiver, the recv() function calls start() and
+  * packets are sent at the desired rate
+  */
+ void svm_nnAgent::sendfile()
+ {
+ 	// Sending SYN packet: 
+ 	Packet* p = allocpkt();
+ 	hdr_svm_nn *rh = hdr_svm_nn::access(p);
+ 
+ 	// SYN and SYNACK packets should be smaller than data packets.
+ 	hdr_cmn *cmnh = hdr_cmn::access(p);
+ 
+ 	cmnh->size_ = svm_nn_HDR_BYTES;
+ 	
+ 	rh->seqno() = ref_seqno_++; /* Masayoshi */
+ 
+ 	rh->ts_ = Scheduler::instance().clock();
+ 	rh->rtt_ = rtt_;
+        
+ 	rh->set_svm_nn_pkt_type(svm_nn_SYN);
+ 	rh->set_svm_nn_rate(svm_nn_desired_rate());
+ 
+     rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+     rh->flowIden() = fid_;
+ 
+     fprintf(stdout,"Starting svm_nn flow fid_ %d \n", fid_);
+ 
+  	target_->recv(p, (Handler*)0);
+ 
+ 	// Change state of sender: Sender is in listening state 
+ 	svm_nn_state = svm_nn_SYNSENT;
+ 
+ 	ref_timer_.resched(SYN_DELAY);
+ 	lastpkttime_ =  Scheduler::instance().clock();  // Masayoshi
+ 
+ 	Tcl::instance().evalf("%s syn-sent", this->name()); /* Added by Masayoshi */
+ }
+ 
+ 
+ /* Nandita Rui
+  * This function has been changed.
+  */
+ void svm_nnAgent::timeout() 
+ {
+ 	if (svm_nn_state == svm_nn_RUNNING || svm_nn_state == svm_nn_RUNNING_WREF) {
+ 		if (num_sent_ < numpkts_ - 1) {
+ 			sendpkt();
+ 			svm_nn_timer_.resched(interval_);
+ 
+ 		} else {
+ 
+ 			double now = Scheduler::instance().clock();
+ 			sendlast();
+ 			Tcl::instance().evalf("%s finish-datasend", this->name()); /* Added by Masayoshi */
+ 			svm_nn_state = svm_nn_FINSENT;
+ 			
+ #ifdef MASAYOSHI_DEBUG			
+ 			fprintf(stdout,"MASA %lf  .. -> svm_nn_FINSENT %s\n",now,this->name());
+ #endif
+ 			svm_nn_timer_.force_cancel();
+ 			ref_timer_.force_cancel();
+             rto_timer_.resched(2*rtt_);
+ 		}
+ 
+ 	} else if (svm_nn_state == svm_nn_RETRANSMIT) {
+ 
+           if (num_pkts_resent_ < num_Pkts_to_retransmit_ - 1) {
+               sendpkt();
+               svm_nn_timer_.resched(interval_);
+           } else if (num_pkts_resent_ == num_Pkts_to_retransmit_ - 1) {
+               sendpkt();
+               svm_nn_timer_.force_cancel();
+               ref_timer_.force_cancel();
+               rto_timer_.resched(2*rtt_);
+           }
+     }
+ }
+ 
+ void svm_nnAgent::retrans_timeout()
+ { 
+     svm_nn_state = svm_nn_RETRANSMIT;
+     num_enter_retransmit_mode_++; 
+     
+     num_pkts_resent_ = 0;
+     num_Pkts_to_retransmit_ = numpkts_ - num_dataPkts_acked_by_receiver_;
+    // fprintf(stdout, "%lf %s Entered retransmission mode %d, num_Pkts_to_retransmit_ %d \n", Scheduler::instance().clock(), this->name(), num_enter_retransmit_mode_, num_Pkts_to_retransmit_);
+ 
+     if (num_Pkts_to_retransmit_ > 0)
+         svm_nn_timer_.resched(interval_);
+ }
+ 
+ 
+ /* Rui
+  * This function 
+  */
+ void svm_nnAgent::ref_timeout() 
+ {
+ 	if (svm_nn_state==svm_nn_SYNSENT || svm_nn_state==svm_nn_RUNNING || svm_nn_state==svm_nn_CONGEST || svm_nn_state == svm_nn_RUNNING_WREF){
+ 		Packet* send_p = allocpkt();
+ 		hdr_svm_nn *rh = hdr_svm_nn::access(send_p);
+ 
+ 		// SYN and SYNACK packets should be smaller than data packets.
+ 		hdr_cmn *cmnh = hdr_cmn::access(send_p);
+ 		cmnh->size_ = svm_nn_HDR_BYTES;
+ 		// cmnh->size_ = 1;
+ 		
+ 		//		rh->seqno() = ref_seqno_ ++;  /* added by Masayoshi */
+ 		rh->seqno() = seqno_;
+ 		ref_seqno_ ++;  /* added by Masayoshi */
+ 		rh->ts_ = Scheduler::instance().clock();
+ 		rh->rtt_ = rtt_;
+ 	
+         if (svm_nn_state == svm_nn_SYNSENT) {
+             rh->set_svm_nn_pkt_type(svm_nn_SYN);
+            // fprintf(stdout, "%lf %s Sending SYN packet again... \n", Scheduler::instance().clock(), this->name());
+         } else {
+ 		    rh->set_svm_nn_pkt_type(svm_nn_REF);
+             numOutRefs_++;
+         }
+ 
+ 		rh->set_svm_nn_rate(svm_nn_desired_rate());
+         rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+         rh->flowIden() = fid_;
+ 		
+ 		target_->recv(send_p, (Handler*)0);
+ 
+ 		// ref_timer_.resched(min(SYN_DELAY, min_rtt_/REF_FACT));
+ 		ref_timer_.resched(min(SYN_DELAY, REF_INTVAL * min_rtt_));
+ 	}
+ }
+ 
+ /*
+  * finish() is called when we must stop (either by request or because
+  * we're out of packets to send.
+  */
+ void svm_nnAgent::finish()
+ {
+ 	double now = Scheduler::instance().clock(); 
+ 
+ 	svm_nn_state = svm_nn_INACT;
+     fid_      = 0; 
+ 
+ #ifdef MASAYOSHI_DEBUG
+ 	fprintf(stdout,"MASA %lf  .. -> svm_nn_INACT %s\n",now,this->name());
+ #endif
+ 
+ 	Tcl::instance().evalf("%s done", this->name()); /* Added by Masayoshi */
+ 
+ #ifdef DELETE_AGENTS
+ 	Tcl::instance().evalf("delete %s", this->name());
+ #endif
+ }
+ 
+ 
+ /* Nandita Rui
+  * This function has been changed.
+  */
+ void svm_nnAgent::recv(Packet* p, Handler*)
+ {
+ 	hdr_svm_nn* rh = hdr_svm_nn::access(p);
+ 
+    if ( (rh->svm_nn_pkt_type() == svm_nn_SYN) || ((svm_nn_state != svm_nn_INACT) && (rh->flowIden() == fid_)) ) {
+ //    if ((rh->svm_nn_pkt_type() == svm_nn_SYN) || (rh->flowIden() == fid_)) {
+ 
+ 	switch (rh->svm_nn_pkt_type()) {
+ 	case svm_nn_SYNACK:
+ 		rtt_ = Scheduler::instance().clock() - rh->ts();
+ 
+ 		if (min_rtt_ > rtt_)
+ 			min_rtt_ = rtt_;
+ 
+ 		if (rh->svm_nn_request_rate() > 0) {
+ 			double now = Scheduler::instance().clock();
+ 			interval_ = (size_+svm_nn_HDR_BYTES)/(rh->svm_nn_request_rate());
+ 
+ #ifdef MASAYOSHI_DEBUG
+ 			fprintf(stdout,"%lf recv_synack..rate_change_1st %s %lf %lf\n",now,this->name(),interval_,((size_+svm_nn_HDR_BYTES)/interval_)/(150000000.0 / 8.0));
+ #endif
+ 			
+             if (svm_nn_state == svm_nn_SYNSENT)
+ 			    start();
+ 
+ 		}
+ 		else {
+ 			if (rh->svm_nn_request_rate() < 0) 
+ 				fprintf(stderr, "Error: svm_nn rate < 0: %f\n",rh->svm_nn_request_rate());
+ 
+ 			if (Random::uniform(0,1)<QUIT_PROB) { //sender decides to stop
+ 				//				svm_nn_state = svm_nn_DONE;
+ 				// svm_nn_state = svm_nn_QUITTING; // Masayoshi
+ 				pause();
+ 				double now = Scheduler::instance().clock();
+ 				fprintf(stdout,"LOG: %lf quit by QUIT_PROB\n",now);
+ 			}
+ 			else {
+ 				svm_nn_state = svm_nn_CONGEST;
+ 				//can do exponential backoff or probalistic stopping here.
+ 			}
+ 
+ 		}
+ 		break;
+ 
+ 	case svm_nn_REFACK:
+ 		//		if ( rh->seqno() < ref_seqno_ && svm_nn_state != svm_nn_INACT) /* Added  by Masayoshi */
+ 		// if ( rh->seqno() < seqno_ && svm_nn_state != svm_nn_INACT) /* Added  by Masayoshi */
+ 		if ( (rh->seqno() <= seqno_)  && svm_nn_state != svm_nn_INACT){ /* Added  by Masayoshi */
+ 			numOutRefs_--;
+ 			if (numOutRefs_ < 0) {
+ 				fprintf(stderr, "Extra REF_ACK received! \n");
+ 				{
+ 					if(svm_nn_state == svm_nn_INACT)
+ 						fprintf(stderr,"svm_nn_INACT\n");
+ 					if(svm_nn_state == svm_nn_SYNSENT)
+ 						fprintf(stderr,"svm_nn_SYNSENT\n");
+ 					if(svm_nn_state == svm_nn_RUNNING)
+ 						fprintf(stderr,"svm_nn_RUNNING\n");
+ 					if(svm_nn_state == svm_nn_RUNNING_WREF)
+ 						fprintf(stderr,"svm_nn_RUNNING_WREF\n");
+ 					if(svm_nn_state == svm_nn_CONGEST)
+ 						fprintf(stderr,"svm_nn_CONGEST\n");
+ 				}
+ 				exit(1);
+ 			}
+ 		
+ 			rtt_ = Scheduler::instance().clock() - rh->ts();
+ 			if (min_rtt_ > rtt_)
+ 				min_rtt_ = rtt_;
+ 
+ 			if (rh->svm_nn_request_rate() > 0) {
+ 				double new_interval = (size_+svm_nn_HDR_BYTES)/(rh->svm_nn_request_rate());
+ 				if( new_interval != interval_ ){
+ 					interval_ = new_interval;
+ 					if (svm_nn_state == svm_nn_CONGEST)
+ 						start();
+ 					else
+ 						rate_change();
+ 				}
+ 				
+ 			}
+ 			else {
+ 				if (rh->svm_nn_request_rate() < 0) 
+ 				fprintf(stderr, "Error: svm_nn rate < 0: %f\n",rh->svm_nn_request_rate());
+ 				svm_nn_timer_.force_cancel();
+ 				svm_nn_state = svm_nn_CONGEST; //can do exponential backoff or probalistic stopping here.
+ 			}
+ 		}
+ 		break;
+ 
+ 	case svm_nn_ACK:
+ 
+          num_dataPkts_acked_by_receiver_ = rh->num_dataPkts_received; 
+         if (num_dataPkts_acked_by_receiver_ == numpkts_) {
+             // fprintf(stdout, "%lf %d svm_nn_ACK: Time to stop \n", Scheduler::instance().clock(), rh->flowIden());
+             stop();
+         }
+ 
+ 		rtt_ = Scheduler::instance().clock() - rh->ts();
+ 		if (min_rtt_ > rtt_)
+ 			min_rtt_ = rtt_;
+ 
+ 		if (rh->svm_nn_request_rate() > 0) {
+ 			double new_interval = (size_+svm_nn_HDR_BYTES)/(rh->svm_nn_request_rate());
+ 			if( new_interval != interval_ ){
+ 				interval_ = new_interval;
+ 				if (svm_nn_state == svm_nn_CONGEST)
+ 					start();
+ 				else
+ 					rate_change();
+ 			}
+ 		}
+ 		else {
+ 			fprintf(stderr, "Error: svm_nn rate < 0: %f\n",rh->svm_nn_request_rate());
+ 			svm_nn_state = svm_nn_CONGEST; //can do exponential backoff or probalistic stopping here.
+ 		}
+ 		break;
+ 
+ 	case svm_nn_FIN:
+ 		{double copy_rate;
+         num_dataPkts_received_++; // because svm_nn_FIN is piggybacked on the last packet of flow
+ 		Packet* send_pkt = allocpkt();
+ 		hdr_svm_nn *send_rh = hdr_svm_nn::access(send_pkt);
+ 		hdr_cmn *cmnh = hdr_cmn::access(send_pkt);
+ 		cmnh->size_ = svm_nn_HDR_BYTES;
+ 		
+ 		copy_rate = rh->svm_nn_request_rate();
+ 		// Can modify the rate here.
+ 		send_rh->seqno() = rh->seqno();
+ 		send_rh->ts() = rh->ts();
+ 		send_rh->rtt() = rh->rtt();
+ 		send_rh->set_svm_nn_pkt_type(svm_nn_FINACK);
+ 		send_rh->set_svm_nn_rate(copy_rate);
+         send_rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+         send_rh->flowIden() = rh->flowIden();
+ 			
+ 		target_->recv(send_pkt, (Handler*)0);
+ 		Tcl::instance().evalf("%s fin-received", this->name()); /* Added by Masayoshi */
+ 		break;
+ 		}
+ 
+ 
+ 	case svm_nn_SYN:
+ 		{double copy_rate;
+ 		
+ 		Packet* send_pkt = allocpkt();
+ 		hdr_svm_nn *send_rh = hdr_svm_nn::access(send_pkt);
+ 		hdr_cmn *cmnh = hdr_cmn::access(send_pkt);
+ 		cmnh->size_ = svm_nn_HDR_BYTES;
+ 		
+ 		copy_rate = rh->svm_nn_request_rate();
+ 		// Can modify the rate here.
+ 		send_rh->seqno() = rh->seqno();
+ 		send_rh->ts() = rh->ts();
+ 		send_rh->rtt() = rh->rtt();
+ 		send_rh->set_svm_nn_pkt_type(svm_nn_SYNACK);
+ 		send_rh->set_svm_nn_rate(copy_rate);
+         send_rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+         send_rh->flowIden() = rh->flowIden();
+ 			
+ 		target_->recv(send_pkt, (Handler*)0);
+         svm_nn_state = svm_nn_RUNNING; // Only the receiver changes state here
+ 
+ 		break;}
+ 
+ 	case svm_nn_FINACK:
+         num_dataPkts_acked_by_receiver_ = rh->num_dataPkts_received;
+ 
+ 	    if (num_dataPkts_acked_by_receiver_ == numpkts_){
+            // fprintf(stdout, "%lf %d svm_nn_FINACK: Time to stop \n", Scheduler::instance().clock(), rh->flowIden());
+             stop();
+         }
+ 		break;
+ 
+ 	case svm_nn_REF:
+ 		{
+ 		double copy_rate;
+ 			
+ 		Packet* send_pkt = allocpkt();
+ 		hdr_svm_nn *send_rh = hdr_svm_nn::access(send_pkt);
+ 		hdr_cmn *cmnh = hdr_cmn::access(send_pkt);
+ 		cmnh->size_ = svm_nn_HDR_BYTES;
+ 		
+ 		copy_rate = rh->svm_nn_request_rate();
+ 		// Can modify the rate here.
+ 		send_rh->seqno() = rh->seqno();
+ 		send_rh->ts() = rh->ts();
+ 		send_rh->rtt() = rh->rtt();
+ 		send_rh->set_svm_nn_pkt_type(svm_nn_REFACK);
+ 		send_rh->set_svm_nn_rate(copy_rate);
+         send_rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+         send_rh->flowIden() = rh->flowIden();
+ 		
+ 		target_->recv(send_pkt, (Handler*)0);
+ 		break;}
+ 		
+ 	case svm_nn_DATA:
+ 		{
+ 		double copy_rate;
+         num_dataPkts_received_++;
+ 			
+ 		Packet* send_pkt = allocpkt();
+ 		hdr_svm_nn *send_rh = hdr_svm_nn::access(send_pkt);
+ 		hdr_cmn *cmnh = hdr_cmn::access(send_pkt);
+ 		cmnh->size_ = svm_nn_HDR_BYTES;
+ 		
+ 		copy_rate = rh->svm_nn_request_rate();
+ 		// Can modify the rate here.
+ 		send_rh->seqno() = rh->seqno();
+ 		send_rh->ts() = rh->ts();
+ 		send_rh->rtt() = rh->rtt();
+ 		send_rh->set_svm_nn_pkt_type(svm_nn_ACK);
+ 		send_rh->set_svm_nn_rate(copy_rate);
+         send_rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+         send_rh->flowIden() = rh->flowIden();
+ 		
+ 		target_->recv(send_pkt, (Handler*)0);
+ 		break;}
+ 
+ 	case svm_nn_OTHER:
+ 		fprintf(stderr, "received svm_nn_OTHER\n");
+ 		exit(1);
+ 		break;
+ 
+ 	default:
+ 		fprintf(stderr, "Unknown svm_nn packet type!\n");
+ 		exit(1);
+ 		break;
+     }
+   }
+ 
+ 	Packet::free(p);
+ }
+ 
+ int svm_nnAgent::command(int argc, const char*const* argv)
+ {
+ 	if (argc == 2) {
+ 		if (strcmp(argv[1], "rate-change") == 0) {
+ 			rate_change();
+ 			return (TCL_OK);
+ 		} else 
+ 			if (strcmp(argv[1], "start") == 0) {
+                         start();
+                         return (TCL_OK);
+                 } else if (strcmp(argv[1], "stop") == 0) {
+                         stop();
+                         return (TCL_OK);
+                 } else if (strcmp(argv[1], "pause") == 0) {
+                         pause();
+                         return (TCL_OK);
+ 		} else if (strcmp(argv[1], "sendfile") == 0) {
+ 			sendfile();
+ 			return(TCL_OK);
+ 		} else if (strcmp(argv[1], "reset") == 0) { /* Masayoshi */
+ 			reset();
+ 			return(TCL_OK);
+ 		}
+ 		
+ 	} 
+ // 	else if (argc == 3) {
+ // 		// if (strcmp(argv[1], "session") == 0) {
+ //  			session_ = (svm_nnSession*)TclObject::lookup(argv[2]);
+ //  			return (TCL_OK);
+ //  		} else 
+ // 			if (strcmp(argv[1], "advance") == 0) {
+ //                         int newseq = atoi(argv[2]);
+ //                         advanceby(newseq - seqno_);
+ //                         return (TCL_OK); 
+ //                 } else if (strcmp(argv[1], "advanceby") == 0) {
+ //                         advanceby(atoi(argv[2]));
+ //                         return (TCL_OK);
+ //                 }
+ // 	}
+ 	return (Agent::command(argc, argv));
+ }
+ 
+ /* 
+  * We modify the rate in this way to get a faster reaction to the a rate
+  * change since a rate change from a very low rate to a very fast rate may 
+  * take an undesireably long time if we have to wait for timeout at the old
+  * rate before we can send at the new (faster) rate.
+  */
+ void svm_nnAgent::rate_change()
+ {
+ 	if (svm_nn_state == svm_nn_RUNNING || svm_nn_state == svm_nn_RUNNING_WREF) {
+ 		svm_nn_timer_.force_cancel();
+ 		
+ 		double t = lastpkttime_ + interval_;
+ 		
+ 		double now = Scheduler::instance().clock();
+ 
+ 		if ( t > now) {
+ #ifdef MASAYOSHI_DEBUG
+ 			fprintf(stdout,"%lf rate_change %s %lf %lf\n",now,this->name(),interval_,((size_+svm_nn_HDR_BYTES)/interval_)/(150000000.0 / 8.0));
+ #endif
+ 			svm_nn_timer_.resched(t - now);
+ 
+ 			if( (t - lastpkttime_) > REF_INTVAL * min_rtt_ && svm_nn_state != svm_nn_RUNNING_WREF ){ 
+ 			// the inter-packet time > min_rtt and not in REF mode. Enter REF MODE.
+ 				svm_nn_state = svm_nn_RUNNING_WREF;
+ #ifdef MASAYOSHI_DEBUG
+ 				fprintf(stdout,"MASA %lf svm_nn_RUNNING -> svm_nn_RUNNING_WREF at start %s\n",now,this->name());
+ #endif
+ 				if( lastpkttime_ + REF_INTVAL * min_rtt_ > now ){
+ 					ref_timer_.resched(lastpkttime_ + REF_INTVAL * min_rtt_ - now);
+ 				} else {
+ 					ref_timeout();  // send ref packet now.
+ 				}
+ 			}else if ((t-lastpkttime_)<= REF_INTVAL * min_rtt_ && 
+ 				  svm_nn_state == svm_nn_RUNNING_WREF ){ 
+ 			// the inter-packet time <= min_rtt and in REF mode.  Exit REF MODE
+ 				svm_nn_state = svm_nn_RUNNING;
+ #ifdef MASAYOSHI_DEBUG
+ 				fprintf(stdout,"MASA %lf svm_nn_RUNNING_WREF -> svm_nn_RUNNING at start %s\n",now,this->name());
+ #endif
+ 				ref_timer_.force_cancel();
+ 			}
+ 
+ 		} else {
+ #ifdef MASAYOSHI_DEBUG
+ 			fprintf(stdout,"%lf rate_change_sync %s %lf %lf\n",now,this->name(),interval_,((size_+svm_nn_HDR_BYTES)/interval_)/(150000000.0 / 8.0));
+ #endif
+ 
+ 			// sendpkt();
+ 			// svm_nn_timer_.resched(interval_);
+             timeout(); // send a packet immediately and reschedule timer 
+ 
+ 
+ 			if( interval_ > REF_INTVAL * min_rtt_ && svm_nn_state != svm_nn_RUNNING_WREF ){ 
+ 			// the next packet sendingtime > min_rtt and not in REF mode. Enter REF MODE.
+ 				svm_nn_state = svm_nn_RUNNING_WREF;
+ #ifdef MASAYOSHI_DEBUG
+ 				fprintf(stdout,"MASA %lf svm_nn_RUNNINGF -> svm_nn_RUNNING_WREF at start %s\n",now,this->name());
+ #endif
+ 				ref_timer_.resched(REF_INTVAL * min_rtt_);
+ 			}else if ( interval_ <= REF_INTVAL * min_rtt_ && svm_nn_state == svm_nn_RUNNING_WREF ){ 
+ 			// the next packet sending time <= min_rtt and in REF mode.  Exit REF MODE
+ 				svm_nn_state = svm_nn_RUNNING;
+ #ifdef MASAYOSHI_DEBUG
+ 				fprintf(stdout,"MASA %lf svm_nn_RUNNINGF_WREF -> svm_nn_RUNNING at start %s\n",now,this->name());
+ #endif
+ 				ref_timer_.force_cancel();
+ 			}
+ 		}
+ 	}
+ }
+ 
+ void svm_nnAgent::sendpkt()
+ {
+ 	Packet* p = allocpkt();
+ 	hdr_svm_nn *rh = hdr_svm_nn::access(p);
+ 	rh->set_svm_nn_rate(0);
+ 	rh->seqno() = seqno_++;
+ 
+ 	hdr_cmn *cmnh = hdr_cmn::access(p);
+ 	cmnh->size_ += svm_nn_HDR_BYTES;
+ 
+ 	// To ADD REF Info //////////
+ 	rh->ts_ = Scheduler::instance().clock();
+ 	rh->rtt_ = rtt_;
+ 	rh->set_svm_nn_pkt_type(svm_nn_DATA);
+ 	rh->set_svm_nn_rate(svm_nn_desired_rate());
+     rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+     rh->flowIden() = fid_;
+ 	/////////////////////////////
+ 
+ 
+ 	lastpkttime_ = Scheduler::instance().clock();
+ 	target_->recv(p, (Handler*)0);
+ 
+     if (svm_nn_state == svm_nn_RETRANSMIT)
+         num_pkts_resent_++;
+     else
+     	num_sent_++;
+ 
+ 	// ref_timer_.resched(min(SYN_DELAY, min_rtt_/REF_FACT));
+ 	//
+ 	//
+ 	// WRITECODE HERE: If interval > RTT
+ 	// Then schedule REF packet 
+ 	// If not, cancel REF packet sending.
+ }
+ 
+ void svm_nnAgent::sendlast()
+ {
+ 	Packet* p = allocpkt();
+ 	hdr_svm_nn *rh = hdr_svm_nn::access(p);
+ 	rh->set_svm_nn_rate(0);
+ 	rh->seqno() = seqno_++;
+ 	rh->set_svm_nn_pkt_type(svm_nn_FIN);
+     rh->set_svm_nn_numPkts_rcvd(num_dataPkts_received_);
+     rh->flowIden() = fid_;
+ 
+ 	hdr_cmn *cmnh = hdr_cmn::access(p);
+ 	cmnh->size_ += svm_nn_HDR_BYTES;
+ 
+ 	lastpkttime_ = Scheduler::instance().clock();
+ 	target_->recv(p, (Handler*)0);
+ 	num_sent_++;
+ }
+ 
+ void svm_nnATimer::expire(Event* /*e*/) {
+ 	(*a_.*call_back_)();
+ }
+ 
+ // void svm_nnAgent::makepkt(Packet* p)
+ // {
+ // 	hdr_svm_nn *rh = hdr_svm_nn::access(p);
+ 
+ // 	rh->set_svm_nn_rate(0);
+ // 	/* Fill in srcid_ and seqno */
+ // 	rh->seqno() = seqno_++;
+ // }
+ 
+ // void svm_nnAgent::sendmsg(int nbytes, const char* /*flags*/)
+ // {
+ //         Packet *p;
+ //         int n;
+ 
+ //         //if (++seqno_ < maxpkts_) {
+ //                 if (size_)
+ //                         n = nbytes / size_;
+ //                 else
+ //                         printf("Error: svm_nnAgent size = 0\n");
+ 
+ //                 if (nbytes == -1) {
+ //                         start();
+ //                         return;
+ //                 }
+ //                 while (n-- > 0) {
+ //                         p = allocpkt();
+ //                         hdr_svm_nn* rh = hdr_svm_nn::access(p);
+ //                         rh->seqno() = seqno_;
+ //                         target_->recv(p);
+ //                 }
+ //                 n = nbytes % size_;
+ //                 if (n > 0) {
+ //                         p = allocpkt();
+ //                         hdr_svm_nn* rh = hdr_svm_nn::access(p);
+ //                         rh->seqno() = seqno_;
+ //                         target_->recv(p);
+ //                 }
+ //                 idle();
+ // //         } else {
+ // //                 finish();
+ // //                 // xxx: should we deschedule the timer here? */
+ // //         }
+ // }
+ // void svm_nnAgent::advanceby(int delta)
+ // {
+ //         maxpkts_ += delta;
+ //         if (seqno_ < maxpkts_ && !running_)
+ //                 start();
+ // }               
+ 
diff -crBN ns-allinone-2.35/ns-2.35/svm_nn/svm_nn-host.h ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn-host.h
*** ns-allinone-2.35/ns-2.35/svm_nn/svm_nn-host.h	1970-01-01 05:30:00.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/svm_nn/svm_nn-host.h	2012-08-29 11:00:16.000000000 +0530
***************
*** 0 ****
--- 1,132 ----
+ /*
+  * svm_nn-host.h
+  *
+  */
+ 
+ #ifndef ns_svm_nn_h
+ #define ns_svm_nn_h
+ 
+ #include "config.h"
+ #include "object.h"
+ #include "agent.h"
+ #include "timer-handler.h"
+ #include "ip.h"
+ 
+ enum svm_nn_PKT_T {svm_nn_OTHER, 
+ 		svm_nn_SYN, 
+ 		svm_nn_SYNACK, 
+ 		svm_nn_REF, 
+ 		svm_nn_REFACK,
+ 		svm_nn_DATA,
+ 		svm_nn_ACK,
+ 		svm_nn_FIN,
+ 		svm_nn_FINACK};
+ 
+ enum svm_nn_HOST_STATE {svm_nn_INACT,
+ 		     svm_nn_SYNSENT, 
+ 		     svm_nn_CONGEST,
+ 		     svm_nn_RUNNING,
+ 		     svm_nn_RUNNING_WREF,
+ 		     svm_nn_FINSENT,
+              svm_nn_RETRANSMIT};
+ 
+ struct hdr_svm_nn {
+ 	int seqno_;
+ 	
+ 	int svm_nn_enabled_;
+ 	int svm_nn_pkt_type_;
+ 	double svm_nn_rate_;  // in bytes per second
+ 
+ 	double rtt_;
+ 	double ts_;
+ 
+ 	static int offset_;
+ 
+     int num_dataPkts_received; // useful for retransmission
+     int flowId;
+     
+ 	inline static int& offset() { return offset_; }
+ 	inline static hdr_svm_nn* access(const Packet* p) {
+ 		return (hdr_svm_nn*) p->access(offset_);
+ 	}
+ 
+ 	/* per-field member functions */
+ 	//u_int32_t& srcid() { return (srcid_); }
+ 	inline int& seqno() { return (seqno_); }
+ 	inline double& ts() { return (ts_); }
+ 	inline double& rtt() { return (rtt_); }
+ 	inline void set_svm_nn_rate(double rate) { svm_nn_rate_ = rate; }
+ 	inline double& svm_nn_request_rate() { return svm_nn_rate_; }
+ 	inline void set_svm_nn_pkt_type(int type) { svm_nn_pkt_type_ = type;}
+ 	inline int& svm_nn_pkt_type() { return svm_nn_pkt_type_; }
+     inline void set_svm_nn_numPkts_rcvd(int numPkts) { num_dataPkts_received = numPkts; }
+     inline int& flowIden() { return(flowId); }
+ };
+ 
+ 
+ class svm_nnAgent;
+ 
+ class svm_nnATimer : public TimerHandler {
+ public: 
+         svm_nnATimer(svm_nnAgent *a, void (svm_nnAgent::*call_back)()) : TimerHandler() {a_ = a;call_back_=call_back;}
+ protected:
+         virtual void expire(Event *e);
+ 	void (svm_nnAgent::*call_back_)();
+         svm_nnAgent *a_;
+ };
+ 
+ class svm_nnAgent : public Agent {
+  public:
+         svm_nnAgent();
+         virtual void timeout();
+ 	    virtual void ref_timeout();
+ 
+         /* For retransmissions */
+         virtual void retrans_timeout();
+ 
+         virtual void recv(Packet* p, Handler*);
+         virtual int command(int argc, const char*const* argv);
+         //void advanceby(int delta);
+         //virtual void sendmsg(int nbytes, const char *flags = 0);
+  protected:
+         virtual void sendpkt();
+         virtual void sendlast();
+         void rate_change();
+         virtual void start();
+         virtual void stop();
+         virtual void pause();
+         virtual void reset();  /* Masayoshi */
+         virtual void finish();
+ 	/* Nandita */ 
+ 	virtual void sendfile(); 
+ 	virtual double svm_nn_desired_rate();
+ 	inline double min(double d1, double d2){ if (d1 < d2){return d1;} else {return d2;} }
+ 
+     double lastpkttime_;
+ 	double rtt_;
+ 	double min_rtt_;
+     int seqno_;
+     int ref_seqno_; /* Masayoshi */
+     int init_refintv_fix_; /* Masayoshi */
+     double interval_;
+ 	double numpkts_;
+ 	int num_sent_;
+ 	int svm_nn_state;
+ 	int numOutRefs_;
+ 
+     /* for retransmissions */ 
+     int num_dataPkts_acked_by_receiver_;   // number of packets acked by receiver 
+     int num_dataPkts_received_;            // Receiver keeps track of number of packets it received
+     int num_Pkts_to_retransmit_;           // Number of data packets to retransmit
+     int num_pkts_resent_;                  // Number retransmitted since last RTO 
+     int num_enter_retransmit_mode_;        // Number of times we are entering retransmission mode 
+ 
+     svm_nnATimer svm_nn_timer_;
+ 	svm_nnATimer ref_timer_;
+ 
+     /* For retransmissions */ 
+     svm_nnATimer rto_timer_;
+ };
+ 
+ 
+ #endif
diff -crBN ns-allinone-2.35/ns-2.35/tcl/lib/ns-default.tcl ns-allinone-2.35-svm_nn/ns-2.35/tcl/lib/ns-default.tcl
*** ns-allinone-2.35/ns-2.35/tcl/lib/ns-default.tcl	2010-07-04 04:15:45.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/tcl/lib/ns-default.tcl	2012-08-29 11:04:21.000000000 +0530
***************
*** 20,26 ****
  # 4. Neither the name of the University nor of the Research Group may be
  #    used to endorse or promote products derived from this software without
  #    specific prior written permission.
! # 
  
  # @(#) $Header: /cvsroot/nsnam/ns-2/tcl/lib/ns-default.tcl,v 1.388 2010/07/03 22:45:45 tom_henderson Exp $
  
--- 20,26 ----
  # 4. Neither the name of the University nor of the Research Group may be
  #    used to endorse or promote products derived from this software without
  #    specific prior written permission.
! # cp
  
  # @(#) $Header: /cvsroot/nsnam/ns-2/tcl/lib/ns-default.tcl,v 1.388 2010/07/03 22:45:45 tom_henderson Exp $
  
***************
*** 119,124 ****
--- 119,138 ----
  # support only xcp flows; set to 1 when supporting both tcp and xcp flows; temporary fix for allocating link BW between xcp and tcp queues until dynamic queue weights come into effect. This fix should then go away
  Queue/XCP set tcp_xcp_on_ 0  ;
  
+ Queue/DropTail set tcp_queue_limit_pkts_ 1000
+ 
+ # Included for svm_nn - to port svm_nn's ns-2.30 patch to ns-2.35
+ Queue/DropTail/svm_nn set alpha_ 0.4
+ Queue/DropTail/svm_nn set beta_ 0.4
+ Queue/DropTail/svm_nn set gamma_ 1
+ Queue/DropTail/svm_nn set min_pprtt_ 0.01
+ Queue/DropTail/svm_nn set init_rate_fact_ 0.05
+ Queue/DropTail/svm_nn set print_status_ 1
+ Queue/DropTail/svm_nn set rate_fact_mode_ 0
+ Queue/DropTail/svm_nn set fixed_rate_fact_ 0.05 ;# effecitve only if rate_fact_mode = 1
+ Queue/DropTail/svm_nn set propag_rtt_ 1.0  ;# effecitve only if rate_fact_mode = 3
+ Queue/DropTail/svm_nn set upd_timeslot_ 0.01  ;# rate update interval (sec).
+ 
  Queue/RED set bytes_ true ;		# default changed on 10/11/2004.
  Queue/RED set queue_in_bytes_ true ;	# default changed on 10/11/2004.
  # Queue/RED set thresh_ 5
***************
*** 1037,1042 ****
--- 1051,1069 ----
  Agent/TCP/Reno/XCP set timestamps_ true
  Agent/TCP/FullTcp/Newreno/XCP set timestamps_ true
  
+ #Agent svm_nn - to port svm_nn's ns-2.30 patch to ns-2.35
+ Agent/svm_nn set numpkts_ 1
+ Agent/svm_nn set seqno_ 0
+ Agent/svm_nn set packetSize_ 1000
+ Agent/svm_nn set delayrtt_ 0
+ Agent/svm_nn set fid_ 0   
+ Agent/svm_nn set init_refintv_fix_ 0
+ Agent/svm_nn instproc done {} { }
+ Agent/svm_nn instproc fin-received {} { }
+ Agent/svm_nn instproc syn-sent {} { }
+ Agent/svm_nn instproc begin-datasend {} { }
+ Agent/svm_nn instproc finish-datasend {} { }
+ 
  Agent/TCP set eln_ 0
  Agent/TCP set eln_rxmit_thresh_ 1
  # Agent/TCP set delay_growth_ false
diff -crBN ns-allinone-2.35/ns-2.35/tcl/lib/ns-packet.tcl ns-allinone-2.35-svm_nn/ns-2.35/tcl/lib/ns-packet.tcl
*** ns-allinone-2.35/ns-2.35/tcl/lib/ns-packet.tcl	2011-10-15 03:41:08.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/tcl/lib/ns-packet.tcl	2012-08-29 11:03:52.000000000 +0530
***************
*** 159,164 ****
--- 159,165 ----
          DCCP_DATAACK    # DCCP, transport protocol
          DCCP_CLOSE      # DCCP, transport protocol
          DCCP_CLOSEREQ   # DCCP, transport protocol
+ 	svm_nn     	# svm_nn, transport protocol - to port svm_nn's ns-2.30 patch to ns-2.35
  # Application-Layer Protocols:
  	Message # a protocol to carry text messages
  	Ping 	# Ping
diff -crBN ns-allinone-2.35/ns-2.35/trace/trace.cc ns-allinone-2.35-svm_nn/ns-2.35/trace/trace.cc
*** ns-allinone-2.35/ns-2.35/trace/trace.cc	2009-11-16 11:21:27.000000000 +0530
--- ns-allinone-2.35-svm_nn/ns-2.35/trace/trace.cc	2012-08-29 11:03:24.000000000 +0530
***************
*** 47,52 ****
--- 47,53 ----
  #include "address.h"
  #include "trace.h"
  #include "rap/rap.h"
+ #include "svm_nn/svm_nn-host.h" // to port svm_nn's ns-2.30 patch to ns-2.35
  
  
  //const double Trace::PRECISION = 1.0e+6; 
***************
*** 191,196 ****
--- 192,198 ----
  	hdr_tcp *tcph = hdr_tcp::access(p);
  	hdr_rtp *rh = hdr_rtp::access(p);
          hdr_rap *raph = hdr_rap::access(p);
+     hdr_svm_nn *svm_nnh = hdr_svm_nn::access(p); // - to port svm_nn's ns-2.30 patch to ns-2.35
  	hdr_tfrc *tfrch = hdr_tfrc::access(p);
  	hdr_tfrc_ack *tfrch_ack = hdr_tfrc_ack::access(p);
  	packet_t t = th->ptype();
***************
*** 209,214 ****
--- 211,218 ----
  		seqno = tfrch->seqno;
  	else if (t == PT_TFRC_ACK)
                  seqno = tfrch_ack->seqno;
+     else if (t == PT_svm_nn) // - to port svm_nn's ns-2.30 patch to ns-2.35
+         seqno = svm_nnh->seqno();
  	else
  		seqno = -1;
   	return seqno;
